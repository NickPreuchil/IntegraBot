import os
import logging
import traceback
from datetime import datetime
import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from database import Database
from models import AnswerStatus
import asyncio
from report_generator import ReportGenerator

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()  # This will also print to console
    ]
)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# Initialize database
db = Database(logger)
db.init_db()

# Constants
MAIN_CHANNEL_INTERNAL_ID = '-100' + os.getenv('MAIN_CHANNEL_ID')
DISCUSSION_GROUP_INTERNAL_ID = '-100' + os.getenv('DISCUSSION_GROUP_ID')

# Callback data constants
NEEDS_REVISION = "revision"
REVIEWED = "reviewed"
PREV_ANSWER = "prev"
NEXT_ANSWER = "next"
GOTO_MESSAGE = "goto"

#///////////////////////////////////////////////////////////
#|------------------ADDITIONAL FUNCTIONS-------------------|
#///////////////////////////////////////////////////////////

def get_answer_keyboard(answer: dict) -> InlineKeyboardMarkup:
    """Create inline keyboard for answer review"""
    keyboard = [
        # First row - status buttons
        [
            InlineKeyboardButton(text="‚ö†Ô∏è –î–æ—Ä–∞–±–æ—Ç–∫–∞", callback_data=f"{NEEDS_REVISION}:{answer['answer_id']}"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", callback_data=f"{REVIEWED}:{answer['answer_id']}")
        ],
        # Second row - navigation buttons
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"{PREV_ANSWER}:{answer['answer_id']}"),
            InlineKeyboardButton(text="üîó –û—Ç–≤–µ—Ç", url=answer['message_link']),
            InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"{NEXT_ANSWER}:{answer['answer_id']}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_answer_status_text(status: int) -> str:
    """Get human readable status text"""
    if status == 0 or status is None:  # –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞
        return "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    elif status == AnswerStatus.NEEDS_REVIEW:
        return "–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    elif status == AnswerStatus.NEEDS_REVISION:
        return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
    elif status == AnswerStatus.REVIEWED:
        return "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"

def format_answer_message(answer: dict) -> str:
    """Format answer message with all details"""
    created_at = datetime.fromisoformat(str(answer['created_at'])).strftime("%Y-%m-%d %H:%M:%S")
    status_text = get_answer_status_text(answer['answer_status'])
    return (
        f"üìù –û—Ç–≤–µ—Ç #{answer['answer_id']}:\n"
        f"üë§ –ò–º—è: {answer['student_name']}\n"
        f"üîó Username: @{answer['student_username']}\n"
        f"‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {created_at}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_text}"
    )

async def send_answer_review_message(answer: dict, chat_id: int) -> None:
    """Send or edit message with answer details and review buttons"""
    await bot.send_message(
        chat_id=chat_id,
        text=format_answer_message(answer),
        reply_markup=get_answer_keyboard(answer)
    )

async def delete_messages_later(messages_to_delete, delay_seconds=180):
    """Delete messages after specified delay"""
    await asyncio.sleep(delay_seconds)
    for message in messages_to_delete:
        try:
            await message.delete()
        except Exception as e:
            logger.error(f"Error deleting message: {e}")

def format_status_emoji(status: int) -> str:
    """Get emoji for answer status"""
    if status == 0 or status is None:  # –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞
        return "‚ùå "
    elif status == int(AnswerStatus.NEEDS_REVIEW):
        return "‚è≥ "
    elif status == int(AnswerStatus.NEEDS_REVISION):
        return "üîÑ "
    elif status == int(AnswerStatus.REVIEWED):
        return "‚úÖ "
    return "‚ùì "

def format_task_name(task: dict) -> str:
    """Format task name based on name and created_at fields"""
    if task['task_name']:
        return task['task_name']
    return f"–ó–∞–¥–∞–Ω–∏–µ {task['task_created_at'].strftime('%d.%m.%Y %H:%M')}"

#///////////////////////////////////////////////////////////
#|-------------------CALLBACK FUNCTIONS--------------------|
#///////////////////////////////////////////////////////////

@dp.callback_query(F.data.startswith(f"{NEEDS_REVISION}:"))
async def handle_needs_revision(callback: types.CallbackQuery):
    """Handle 'needs revision' button press"""
    try:
        answer_id = int(callback.data.split(':')[1])
        logger.info(f"Updating answer {answer_id} to status NEEDS_REVISION")
        
        # Update answer status
        new_status = int(AnswerStatus.NEEDS_REVISION)
        logger.info(f"New status value: {new_status}")
        
        success = db.answer.update_status(answer_id, new_status)
        if success:
            # Get updated answer data
            answer = db.answer.get_by_id(answer_id)
            if answer:
                logger.info(f"Answer {answer_id} updated successfully")
                # Update message text and keyboard
                await callback.message.edit_text(
                    text=format_answer_message(answer),
                    reply_markup=get_answer_keyboard(answer)
                )
                await callback.answer(text="–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞", show_alert=False)
            else:
                logger.error(f"Could not find answer {answer_id} after update")
                await callback.answer(text="–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
        else:
            logger.error(f"Failed to update answer {answer_id}")
            logger.error(traceback.format_exc())
            await callback.answer(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error handling needs revision callback: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith(f"{REVIEWED}:"))
async def handle_reviewed(callback: types.CallbackQuery):
    """Handle 'reviewed' button press"""
    try:
        answer_id = int(callback.data.split(':')[1])
        logger.info(f"Updating answer {answer_id} to status REVIEWED")
        
        # Update answer status
        new_status = int(AnswerStatus.REVIEWED)
        logger.info(f"New status value: {new_status}")
        
        success = db.answer.update_status(answer_id, new_status)
        if success:
            # Get updated answer data
            answer = db.answer.get_by_id(answer_id)
            if answer:
                logger.info(f"Answer {answer_id} updated successfully")
                # Update message text and keyboard
                await callback.message.edit_text(
                    text=format_answer_message(answer),
                    reply_markup=get_answer_keyboard(answer)
                )
                await callback.answer(text="–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", show_alert=False)
            else:
                logger.error(f"Could not find answer {answer_id} after update")
                await callback.answer(text="–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
        else:
            logger.error(f"Failed to update answer {answer_id}")
            await callback.answer(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error handling reviewed callback: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith(f"{PREV_ANSWER}:"))
async def handle_prev_answer(callback: types.CallbackQuery):
    """Handle 'previous answer' button press"""
    try:
        answer_id = int(callback.data.split(':')[1])
        tutor = db.tutor.get_by_telegram_id(callback.from_user.id)
        if not tutor:
            await callback.answer(text="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
            return

        prev_answer = db.answer.get_previous_answer(answer_id, tutor['id'])
        if prev_answer:
            await callback.message.edit_text(
                text=format_answer_message(prev_answer),
                reply_markup=get_answer_keyboard(prev_answer)
            )
            await callback.answer()
        else:
            await callback.answer(text="–≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç", show_alert=True)

    except Exception as e:
        logger.error(f"Error handling previous answer callback: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith(f"{NEXT_ANSWER}:"))
async def handle_next_answer(callback: types.CallbackQuery):
    """Handle 'next answer' button press"""
    try:
        answer_id = int(callback.data.split(':')[1])
        tutor = db.tutor.get_by_telegram_id(callback.from_user.id)
        if not tutor:
            await callback.answer(text="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
            return

        next_answer = db.answer.get_next_answer(answer_id, tutor['id'])
        if next_answer:
            await callback.message.edit_text(
                text=format_answer_message(next_answer),
                reply_markup=get_answer_keyboard(next_answer)
            )
            await callback.answer()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            answers = db.answer.get_by_tutor(tutor['id'])
            if not answers:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await callback.message.edit_text("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
                await callback.answer(text="–í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", show_alert=True)
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –æ—Ç–≤–µ—Ç—ã, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                await callback.answer(text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç", show_alert=True)

    except Exception as e:
        logger.error(f"Error handling next answer callback: {e}")
        await callback.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith(f"{GOTO_MESSAGE}:"))
async def handle_goto_message(callback: types.CallbackQuery):
    """Handle 'goto message' button press"""
    try:
        answer_id = int(callback.data.split(':')[1])
        
        # Get answer details
        answer = db.answer.get_by_id(answer_id)
        if not answer:
            await callback.answer("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await callback.answer(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: {answer['message_link']}")
    
    except Exception as e:
        logger.error(f"Error handling goto message callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("stats_page:"))
async def handle_stats_pagination(callback: types.CallbackQuery):
    """Handle statistics pagination"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        _, student_id, page = callback.data.split(":")
        student_id = int(student_id)
        page = int(page)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        student = db.student.get_by_id(student_id)
        if not student:
            await callback.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(callback.from_user.id)
        if not tutor or student['tutor_id'] != tutor['id']:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        answer_model = db.answer
        stats = answer_model.get_student_statistics(student_id)
        if not stats:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = [
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['name']} ({student['username']})\n",
            "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['summary']['reviewed']}",
            f"‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {stats['summary']['needs_review']}",
            f"üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ: {stats['summary']['needs_revision']}\n"
        ]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        tasks_per_page = 2
        total_tasks = len(stats['details'])
        total_pages = (total_tasks + tasks_per_page - 1) // tasks_per_page

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1 or page > total_pages:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return

        response.append("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        start_idx = (page - 1) * tasks_per_page
        end_idx = min(start_idx + tasks_per_page, total_tasks)
        
        for task in stats['details'][start_idx:end_idx]:
            # response.append(
            #     f"{format_task_name(task)}: {format_status_emoji(task['status'])}"
            # )
            task_name = format_task_name(task)
            status_emoji = format_status_emoji(task['status'])
            status_text = get_answer_status_text(task['status'])

            task_line = f"{task_name}: {status_emoji} {status_text}"
            if task['message_link'] and task['status']:  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç
                task_line += f" [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç]({task['message_link']})"
            response.append(task_line)


        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = []
        if total_pages > 1:
            buttons = []
            if page > 1:
                buttons.append(InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"stats_page:{student_id}:{page-1}"
                ))
            buttons.append(InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="current_page"
            ))
            if page < total_pages:
                buttons.append(InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"stats_page:{student_id}:{page+1}"
                ))
            keyboard.append(buttons)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "\n".join(response),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error handling stats pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.callback_query(F.data.startswith("confirm_remove:"))
async def handle_confirm_remove(callback: types.CallbackQuery):
    """Handle student removal confirmation"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ callback data
        student_id = int(callback.data.split(":")[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        student = db.student.get_by_id(student_id)
        if not student:
            await callback.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(callback.from_user.id)
        if not tutor or student['tutor_id'] != tutor['id']:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞")
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        if db.student.delete(student_id):
            await callback.message.edit_text(
                f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {student['name']} (@{student['username']}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            )
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")

        await callback.answer()

    except Exception as e:
        logger.error(f"Error in confirm_remove: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")

@dp.callback_query(F.data == "cancel_remove")
async def handle_cancel_remove(callback: types.CallbackQuery):
    """Handle student removal cancellation"""
    try:
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in cancel_remove: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

#///////////////////////////////////////////////////////////
#|--------------------COMMANDS HANDLERS--------------------|
#///////////////////////////////////////////////////////////

@dp.message(Command("stats"))
async def handle_stats_command(message: types.Message):
    """Handle the /stats command from tutors"""
    try:
        # Get tutor ID from message
        tutor_id = message.from_user.id
        
        # Get student ID from command arguments
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /stats")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(tutor_id)
        if not tutor:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        try:
            student_telegram_id = int(command_parts[1])
        except ValueError:
            await message.reply("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        student = db.student.get_by_telegram_id(student_telegram_id)
        if not student:
            await message.reply("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ —ç—Ç–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º
        if student['tutor_id'] != tutor['id']:
            await message.reply("–≠—Ç–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏")
            return
        
        # Get statistics
        answer_model = db.answer
        stats = answer_model.get_student_statistics(student['id'])
        
        if not stats:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            return

        response = [
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['name']} ({student['username']})\n\n",
            "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['summary']['reviewed']}",
            f"‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {stats['summary']['needs_review']}",
            f"üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ: {stats['summary']['needs_revision']}\n"
        ]
        
        # Count totals
        total_tasks = len(stats)
        completed_tasks = sum(1 for stat in stats if stat['status'] == AnswerStatus.REVIEWED.value)
        needs_review = sum(1 for stat in stats if stat['status'] == AnswerStatus.NEEDS_REVIEW.value)
        needs_revision = sum(1 for stat in stats if stat['status'] == AnswerStatus.NEEDS_REVISION.value)
        
        # Add summary
        msg += f"–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}\n"
        msg += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
        msg += f"üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {needs_review}\n"
        msg += f"üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ: {needs_revision}\n\n"
        
        # Add details for each task
        msg += "–î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º:\n"
        for stat in stats:
            task_name = format_task_name(stat)
            status_emoji = format_status_emoji(stat['status'])
            status_text = get_answer_status_text(stat['status'])
            
            task_line = f"{task_name}: {status_emoji} {status_text}"
            if stat['message_link'] and stat['status']:  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç
                task_line += f" [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç]({stat['message_link']})"
            msg += task_line + "\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        page = 1
        tasks_per_page = 10
        total_tasks = len(stats['details'])
        total_pages = (total_tasks + tasks_per_page - 1) // tasks_per_page

        response.append("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        start_idx = 0
        end_idx = min(tasks_per_page, total_tasks)

        keyboard = []
        if total_pages > 1:
            buttons = []
            if page > 1:
                buttons.append(InlineKeyboardButton(
                    text="‚óÄÔ∏è",
                    callback_data=f"stats_page:{student['id']}:{page - 1}"
                ))
            buttons.append(InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="current_page"
            ))
            if page < total_pages:
                buttons.append(InlineKeyboardButton(
                    text="‚ñ∂Ô∏è",
                    callback_data=f"stats_page:{student['id']}:{page + 1}"
                ))
            keyboard.append(buttons)

        await message.reply(
            "\n".join(response),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
        )

        # Send message with statistics
        await message.reply(msg, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        logger.error(traceback.format_exc())

@dp.message(Command("rename_task"))
async def handle_rename_task(message: types.Message):
    """Handle task renaming command"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(message.from_user.id)
        if not tutor:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.reply(
                "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /rename_task <—Å—Å—ã–ª–∫–∞_–Ω–∞_–∑–∞–¥–∞–Ω–∏–µ> <–Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
                "–ü—Ä–∏–º–µ—Ä: /rename_task https://t.me/channel/123 –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ1"
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º message_id –∏–∑ —Å—Å—ã–ª–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        try:
            message_id = int(parts[1].split('/')[-1])
        except (ValueError, IndexError):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–æ–Ω—Ü–µ —Å—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω message_id")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        new_name = parts[2].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        task = db.task.get_by_channel_message(message_id)
        if not task:
            await message.reply(f"–ó–∞–¥–∞–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if db.task.update_name(message_id, new_name):
            await message.reply(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")

    except Exception as e:
        logger.error(f"Error in rename_task: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")

@dp.message(Command("report"))
async def handle_report_command(message: types.Message):
    """Generate and send total statistics report"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(message.from_user.id)
        if not tutor:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
        report_generator = ReportGenerator(db)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_path = report_generator.generate_total_statistics_report()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(report_path, 'rb') as report_file:
            await message.answer_document(
                types.input_file.BufferedInputFile(
                    report_file.read(), 
                    filename=os.path.basename(report_path)
                ),
                caption="–û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
            )
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(report_path)

    except Exception as e:
        logger.error(f"Error generating report: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

@dp.message(Command("add_student"))
async def handle_add_student(message: types.Message, bot: Bot):
    """Handle add student command from tutor"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(message.from_user.id)
        if not tutor:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add_student <telegram_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /add_student 123456789"
            )
            return

        try:
            student_telegram_id = int(args[1])
        except ValueError:
            await message.reply("Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç
        existing_student = db.student.get_by_telegram_id(student_telegram_id)
        if existing_student:
            await message.reply(f"–°—Ç—É–¥–µ–Ω—Ç —Å Telegram ID {student_telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        try:
            chat_member = await bot.get_chat_member(
                chat_id=MAIN_CHANNEL_INTERNAL_ID,
                user_id=student_telegram_id
            )

            if not chat_member.user:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                return

            if db.student.create(student_telegram_id, tutor['id'], chat_member.user.username, chat_member.user.full_name):
                await message.reply(
                    f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                    f"–ò–º—è: {chat_member.user.full_name}\n"
                    f"Username: @{chat_member.user.username}"
                )

                student_data = {
                    'telegram_id': student_telegram_id,
                    'name': chat_member.user.full_name,
                    'username': chat_member.user.username,
                    'tutor_id': tutor['id']
                }
                logger.info(f"Created new student: {student_data}")
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")

        except TelegramBadRequest as e:
            await message.reply(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞."
            )

    except Exception as e:
        logger.error(f"Error in add_student: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")

@dp.message(Command("check"))
async def handle_check_command(message: types.Message):
    """Handle the /check command from tutors"""
    try:
        # Get tutor by telegram_id
        tutor = db.tutor.get_by_telegram_id(message.from_user.id)
        if not tutor:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        # Get answers that need review
        answers = db.answer.get_by_tutor(tutor['id'])
        if not answers:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
            bot_response = await message.reply("–£ –≤–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            asyncio.create_task(delete_messages_later(
                [message, bot_response],
                delay_seconds=180  # 3 –º–∏–Ω—É—Ç—ã
            ))
            return

        # Send first answer for review
        await send_answer_review_message(answers[0], message.chat.id)

    except Exception as e:
        logger.error(f"Error handling check command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command("my_students"))
async def handle_my_students(message: types.Message):
    """Handle my students command from tutor"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(message.from_user.id)
        if not tutor:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = db.student.get_by_tutor(tutor['id'])
        if not students:
            await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        response = ["üìö –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:"]
        for i, student in enumerate(students, 1):
            username = f"@{student['username']}" if student['username'] else "–Ω–µ—Ç username"
            response.append(f"{i}. {student['name']} ({username})")

        await message.reply("\n".join(response))

    except Exception as e:
        logger.error(f"Error in my_students: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")

@dp.message(Command("remove_student"))
async def handle_remove_student(message: types.Message):
    """Handle remove student command from tutor"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞
        tutor = db.tutor.get_by_telegram_id(message.from_user.id)
        if not tutor:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤")
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /remove_student <telegram_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /remove_student 123456789"
            )
            return

        try:
            student_telegram_id = int(args[1])
        except ValueError:
            await message.reply("Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        student = db.student.get_by_telegram_id(student_telegram_id)
        if not student:
            await message.reply("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ —ç—Ç–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º
        if student['tutor_id'] != tutor['id']:
            await message.reply("–≠—Ç–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é inline –∫–Ω–æ–ø–æ–∫
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_remove:{student['id']}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_remove"
                )
            ]
        ]

        await message.reply(
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['name']} (@{student['username']})?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

    except Exception as e:
        logger.error(f"Error in remove_student: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")

#///////////////////////////////////////////////////////////
#|-----------------CHANNEL EVENTS HANDLERS-----------------|
#///////////////////////////////////////////////////////////

@dp.channel_post()
async def handle_channel_post(message: types.Message):
    """Handle new posts in the channel"""
    try:
        # Check if this message is from our main channel
        if str(message.chat.id) != MAIN_CHANNEL_INTERNAL_ID:
            return

        # Get message text (can be in text or caption)
        post_text = message.text or message.caption or ""
        
        # Check if post contains the test keyword
        if os.getenv('CHANNEL_POST_TRIGGER_TEXT') not in post_text:
            logger.info(f"Skipping post {message.message_id} - no test keyword found")
            return

        # Create new task from the channel message
        task_id = db.task.create(channel_message_id=message.message_id)
        
        if task_id:
            logger.info(
                f"Created new task (ID: {task_id}) from channel message {message.message_id}. "
                f"Text: {post_text[:100]}..."
            )
        else:
            logger.error(f"Failed to create task from channel message {message.message_id}")
            
    except Exception as e:
        logger.error(f"Error handling channel post: {e}")

@dp.message()
async def handle_message(message: types.Message):
    """Handle messages in discussion group"""
    try:
        # Only process messages from the discussion group
        if str(message.chat.id) != DISCUSSION_GROUP_INTERNAL_ID:
            return

        # Only process replies to channel posts
        if not message.reply_to_message:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä-—Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if os.getenv('ANSWER_TRIGGER_TEXT') not in message.text:
            logger.info(f"Message doesn't contain trigger text: {message.text}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        student = db.student.get_by_telegram_id(message.from_user.id)
        if not student:
            logger.warning(f"Message from non-student user: {message.from_user.id}")
            return

        # Get the channel message ID that this comment is replying to
        channel_message_id = message.reply_to_message.forward_from_message_id
        
        # Get task by channel message ID
        task = db.task.get_by_channel_message(channel_message_id)
        if not task:
            logger.error(f"No task found for channel message: {channel_message_id}")
            return

        # Create message link
        message_link = f"https://t.me/c/{os.getenv('DISCUSSION_GROUP_ID')}/{message.message_id}"

        # Create new answer
        answer_id = db.answer.create(
            student_id=student['id'],
            task_id=task['task_id'],
            message_link=message_link
        )
        
        if answer_id:
            logger.info(
                f"Created answer (ID: {answer_id}) from student {student['name']} "
                f"for task {task['task_id']}"
            )
        else:
            logger.error(
                f"Failed to create answer from student {student['name']} "
                f"for task {task['task_id']}"
            )

    except Exception as e:
        logger.error(f"Error handling message: {e}")
        logger.error(traceback.format_exc())

@dp.edited_message()
async def handle_edited_message(message: types.Message):
    """Handle edited messages in discussion group"""
    try:
        # Only process messages from the discussion group
        if str(message.chat.id) != DISCUSSION_GROUP_INTERNAL_ID:
            return

        # Only process replies to channel posts
        if not message.reply_to_message:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä-—Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if os.getenv('ANSWER_TRIGGER_TEXT') not in message.text:
            logger.info(f"Edited message doesn't contain trigger text: {message.text}")
            return

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_link = f"https://t.me/c/{os.getenv('DISCUSSION_GROUP_ID')}/{message.message_id}"

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        existing_answer = db.answer.get_by_message_link(message_link)
        if not existing_answer:
            logger.info(f"No answer found for message link: {message_link}")
            student = db.student.get_by_telegram_id(message.from_user.id)
            if not student:
                logger.warning(f"Message from non-student user: {message.from_user.id}")
                return

            channel_message_id = message.reply_to_message.forward_from_message_id
            task = db.task.get_by_channel_message(channel_message_id)
            if not task:
                logger.error(f"No task found for channel message: {channel_message_id}")
                return

            answer_id = db.answer.create(
                student_id=student['id'],
                task_id=task['task_id'],
                message_link=message_link
            )

            if answer_id:
                logger.info(
                    f"Created answer (ID: {answer_id}) (edited msg) from student {student['name']} "
                    f"for task {task['task_id']}"
                )
            else:
                logger.error(
                    f"Failed to create answer (edited msg) from student {student['name']} "
                    f"for task {task['task_id']}"
                )

            existing_answer = db.answer.get_by_message_link(message_link)

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        if existing_answer['answer_status'] == int(AnswerStatus.NEEDS_REVISION):
            db.answer.update(
                existing_answer['answer_id'],
                {
                    'answer_status': int(AnswerStatus.NEEDS_REVIEW)
                }
            )
            logger.info(f"Updated answer {existing_answer['id']} status to NEEDS_REVIEW")

    except Exception as e:
        logger.error(f"Error handling edited message: {e}")

async def main():
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(token=os.getenv('BOT_TOKEN'))
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
